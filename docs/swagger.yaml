basePath: /api/v1
definitions:
  handlers.UserRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      hashed_password:
        type: string
    type: object
  tokens.TokenPair:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
host: 127.0.0.1:8080
info:
  contact:
    email: andrushathegames@gmail.com
    name: Andrei Dombrovskii
  description: This is a test task for Juniour Go Developer in MEDODS.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: MEDODS Golang test task
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user via email and password
      parameters:
      - description: User email and password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tokens.TokenPair'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Login user
      tags:
      - Authentication
  /auth/refresh:
    post:
      description: Returns new access and refresh tokens if refresh token is correct
        and not expired.
      parameters:
      - description: Refresh Token
        in: query
        name: refresh_token
        required: true
        type: string
      - description: User email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tokens.TokenPair'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Refresh tokens
      tags:
      - Authentication
  /user/add:
    post:
      description: Adds user's email and hashed password to the database
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
      summary: Add user
      tags:
      - User
  /user/ping:
    get:
      description: Do ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - AccessToken: []
      summary: Ping example
      tags:
      - User
securityDefinitions:
  AccessToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
